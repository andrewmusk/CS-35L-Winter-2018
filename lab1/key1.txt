Exercise 1.1)

I switch between this window and the other window in emacs by first 
spliting them with C-x 2 and then switching 
between them using C-x o

1. emacs exer1.html
2. C-s PUBLIC ret
3. C-s Laboratory C-s
4. C-s ret C-w Self-referential ret
5. C-s arrow ret
6. C-e
7. C-a
8. Using the above commands 
9. I closed the window Using C-x C-s and C-x 0

Exercise 1.2)

1. open the file exer2.html using C-x C-f exer2.html
2. Move to the next line using C-n and deleted the line using C-k
3. Search for the text using C-s ret C-w DELETEME DELETEME DELETEME ret. I 
then moved to beginning of line using C-a
and deleted using C-k
4. I searched for the text using C-s https://en.wikipedia.org/wiki/HTML_comment#Comments C-s. I then deleted using C-k
5. I searched for the comment section using C-s <!-- and then deleted. 

Exercise 1.3)

2. I did this using search and replace by typing M-% Assignment 1 Assignment 37 spc spc
3. I searched for the word using C-s and then used M-% US-ASCII ret spc
4. I move to the beginning using M-< and then searched C-s </ol>. I then moved up a line and pressed ret
5. 

Exercise 1.4)

3. To go to the end of the file: M->
4. To move each line I first deleted it using C-k and then moved it used C-y in it's original position. I used M-k for longer comments
5. Deleted the rest by using C-spc at the beginning of the segment 
6. I undid this by pressing C-y
7.
8. I searched using C-s and then enter M-% <Ol> ent for replacement and used spc to replace each one
9.
 
Exercise 1.5)

1. M-x make-directory ret junk ret
2. M-! cd junk. This moves us into the junk directory. We then create the file by typing  C-x C-f hello.c ret. After this we add in the text
3. We compile the file by typing M-x compile ret. We then delete the text, gcc -o hello hello.c 
4. We then run by M-x compile ret then ./hello ret. 
5. We then enter the window C-x 0 and save to a buffer through C-x C-w hello-out ret
we then copy this by setting a mark at the beginning using C-space then M-> and then C-w
We then switch files, C-x C-f key1.txt and then we copy using C-y

-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Thu Jan 11 16:07:08

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Thu Jan 11 16:07:08


Exercise 1.6

1. C-x b *scratch* ret
2. (random 50) c-j
3. (setq x (random))
   (setq y (random))
4. (* x y)
 The result is 3808. However if we continue we see that when we have 2 negatives we sometimes get a negative result. This occurs because there is overflow. 
5. M-: (* x y) 
The result in this case is 3808
6. The results in these cases are the same. This means that the random numbers follow some pattern or rules and are not truly random since they follow some rules.
7.  The probability that the product is incorrect is based on the probability that overflow occurs. I determined the probability that it is incorrect based on the number of bits in the integer. The probability I came to was 1/2^n. 
